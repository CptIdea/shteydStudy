// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package reference

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GetterClient is the client API for Getter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetterClient interface {
	GetReferenceId(ctx context.Context, in *ReferenceName, opts ...grpc.CallOption) (*ReferenceId, error)
}

type getterClient struct {
	cc grpc.ClientConnInterface
}

func NewGetterClient(cc grpc.ClientConnInterface) GetterClient {
	return &getterClient{cc}
}

func (c *getterClient) GetReferenceId(ctx context.Context, in *ReferenceName, opts ...grpc.CallOption) (*ReferenceId, error) {
	out := new(ReferenceId)
	err := c.cc.Invoke(ctx, "/reference.getter/GetReferenceId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetterServer is the server API for Getter service.
// All implementations must embed UnimplementedGetterServer
// for forward compatibility
type GetterServer interface {
	GetReferenceId(context.Context, *ReferenceName) (*ReferenceId, error)
	mustEmbedUnimplementedGetterServer()
}

// UnimplementedGetterServer must be embedded to have forward compatible implementations.
type UnimplementedGetterServer struct {
}

func (UnimplementedGetterServer) GetReferenceId(context.Context, *ReferenceName) (*ReferenceId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReferenceId not implemented")
}
func (UnimplementedGetterServer) mustEmbedUnimplementedGetterServer() {}

// UnsafeGetterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetterServer will
// result in compilation errors.
type UnsafeGetterServer interface {
	mustEmbedUnimplementedGetterServer()
}

func RegisterGetterServer(s grpc.ServiceRegistrar, srv GetterServer) {
	s.RegisterService(&Getter_ServiceDesc, srv)
}

func _Getter_GetReferenceId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReferenceName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetterServer).GetReferenceId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reference.getter/GetReferenceId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetterServer).GetReferenceId(ctx, req.(*ReferenceName))
	}
	return interceptor(ctx, in, info, handler)
}

// Getter_ServiceDesc is the grpc.ServiceDesc for Getter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Getter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reference.getter",
	HandlerType: (*GetterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetReferenceId",
			Handler:    _Getter_GetReferenceId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reference.proto",
}

// CrudClient is the client API for Crud service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CrudClient interface {
	CreateReference(ctx context.Context, in *Reference, opts ...grpc.CallOption) (*Reference, error)
	RemoveReference(ctx context.Context, in *ReferenceId, opts ...grpc.CallOption) (*Reference, error)
	UpdateReference(ctx context.Context, in *Reference, opts ...grpc.CallOption) (*Reference, error)
	DeleteReference(ctx context.Context, in *Reference, opts ...grpc.CallOption) (*Reference, error)
}

type crudClient struct {
	cc grpc.ClientConnInterface
}

func NewCrudClient(cc grpc.ClientConnInterface) CrudClient {
	return &crudClient{cc}
}

func (c *crudClient) CreateReference(ctx context.Context, in *Reference, opts ...grpc.CallOption) (*Reference, error) {
	out := new(Reference)
	err := c.cc.Invoke(ctx, "/reference.crud/CreateReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudClient) RemoveReference(ctx context.Context, in *ReferenceId, opts ...grpc.CallOption) (*Reference, error) {
	out := new(Reference)
	err := c.cc.Invoke(ctx, "/reference.crud/RemoveReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudClient) UpdateReference(ctx context.Context, in *Reference, opts ...grpc.CallOption) (*Reference, error) {
	out := new(Reference)
	err := c.cc.Invoke(ctx, "/reference.crud/UpdateReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudClient) DeleteReference(ctx context.Context, in *Reference, opts ...grpc.CallOption) (*Reference, error) {
	out := new(Reference)
	err := c.cc.Invoke(ctx, "/reference.crud/DeleteReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CrudServer is the server API for Crud service.
// All implementations must embed UnimplementedCrudServer
// for forward compatibility
type CrudServer interface {
	CreateReference(context.Context, *Reference) (*Reference, error)
	RemoveReference(context.Context, *ReferenceId) (*Reference, error)
	UpdateReference(context.Context, *Reference) (*Reference, error)
	DeleteReference(context.Context, *Reference) (*Reference, error)
	mustEmbedUnimplementedCrudServer()
}

// UnimplementedCrudServer must be embedded to have forward compatible implementations.
type UnimplementedCrudServer struct {
}

func (UnimplementedCrudServer) CreateReference(context.Context, *Reference) (*Reference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReference not implemented")
}
func (UnimplementedCrudServer) RemoveReference(context.Context, *ReferenceId) (*Reference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveReference not implemented")
}
func (UnimplementedCrudServer) UpdateReference(context.Context, *Reference) (*Reference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReference not implemented")
}
func (UnimplementedCrudServer) DeleteReference(context.Context, *Reference) (*Reference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReference not implemented")
}
func (UnimplementedCrudServer) mustEmbedUnimplementedCrudServer() {}

// UnsafeCrudServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CrudServer will
// result in compilation errors.
type UnsafeCrudServer interface {
	mustEmbedUnimplementedCrudServer()
}

func RegisterCrudServer(s grpc.ServiceRegistrar, srv CrudServer) {
	s.RegisterService(&Crud_ServiceDesc, srv)
}

func _Crud_CreateReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Reference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServer).CreateReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reference.crud/CreateReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServer).CreateReference(ctx, req.(*Reference))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crud_RemoveReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReferenceId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServer).RemoveReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reference.crud/RemoveReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServer).RemoveReference(ctx, req.(*ReferenceId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crud_UpdateReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Reference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServer).UpdateReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reference.crud/UpdateReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServer).UpdateReference(ctx, req.(*Reference))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crud_DeleteReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Reference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServer).DeleteReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reference.crud/DeleteReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServer).DeleteReference(ctx, req.(*Reference))
	}
	return interceptor(ctx, in, info, handler)
}

// Crud_ServiceDesc is the grpc.ServiceDesc for Crud service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Crud_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reference.crud",
	HandlerType: (*CrudServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateReference",
			Handler:    _Crud_CreateReference_Handler,
		},
		{
			MethodName: "RemoveReference",
			Handler:    _Crud_RemoveReference_Handler,
		},
		{
			MethodName: "UpdateReference",
			Handler:    _Crud_UpdateReference_Handler,
		},
		{
			MethodName: "DeleteReference",
			Handler:    _Crud_DeleteReference_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reference.proto",
}
